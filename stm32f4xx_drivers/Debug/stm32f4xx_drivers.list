
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b60  08000b60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b6c  08000b6c  00010b74  2**0
                  CONTENTS
  4 .ARM          00000000  08000b6c  08000b6c  00010b74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b6c  08000b74  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b70  08000b70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000b74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000b74  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b74  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ba4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011ed  00000000  00000000  00010be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000462  00000000  00000000  00011dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00012238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fc  00000000  00000000  00012398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020fd  00000000  00000000  00012494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015bb  00000000  00000000  00014591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000090fb  00000000  00000000  00015b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004e8  00000000  00000000  0001ec48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0001f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b48 	.word	0x08000b48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000b48 	.word	0x08000b48

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI2_GPIOInits>:
 * SPI2_NSS  ---> PB12
 */

GPIO_Handle_t gpio_button;

void SPI2_GPIOInits(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t spi2_pins;
	spi2_pins.pGPIOx = GPIOB;
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <SPI2_GPIOInits+0x4c>)
 80001ec:	607b      	str	r3, [r7, #4]
	spi2_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	spi2_pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	spi2_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_PP; //SPI doesn't need open drain
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	spi2_pins.GPIO_PinConfig.GPIO_PUPDControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	spi2_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	//SCLK
	spi2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi2_pins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f8d1 	bl	80003b0 <GPIO_Init>

	//MOSI
	spi2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi2_pins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f8cb 	bl	80003b0 <GPIO_Init>
	//MISO
//	spi2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
//	GPIO_Init(&spi2_pins);

	//NSS
	spi2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi2_pins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f8c5 	bl	80003b0 <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Inits>:

void SPI2_Inits(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SPI2_Inits+0x38>)
 800023c:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusCongif = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEV_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000246:	2302      	movs	r3, #2
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BIT;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_IDLE_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_FIRST_EDGE;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DISABLED;
 8000256:	2300      	movs	r3, #0
 8000258:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 faf7 	bl	8000850 <SPI_Init>

}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <delay>:

void delay(void){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	for(int i=0 ;i<500000/2;i++){
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	ddf8      	ble.n	800027c <delay+0xc>

	}
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	0003d08f 	.word	0x0003d08f

0800029c <Button_init>:

void Button_init(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	/*Init button pin*/
	gpio_button.pGPIOx = GPIOC;
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <Button_init+0x28>)
 80002a2:	4a09      	ldr	r2, [pc, #36]	; (80002c8 <Button_init+0x2c>)
 80002a4:	601a      	str	r2, [r3, #0]
	gpio_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <Button_init+0x28>)
 80002a8:	220d      	movs	r2, #13
 80002aa:	711a      	strb	r2, [r3, #4]
	gpio_button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <Button_init+0x28>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	715a      	strb	r2, [r3, #5]
//	gpio_button.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_PP;
	gpio_button.GPIO_PinConfig.GPIO_PUPDControl = GPIO_PU;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <Button_init+0x28>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	71da      	strb	r2, [r3, #7]
	GPIO_Init(&gpio_button);
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <Button_init+0x28>)
 80002ba:	f000 f879 	bl	80003b0 <GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000001c 	.word	0x2000001c
 80002c8:	40020800 	.word	0x40020800

080002cc <main>:

int main(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0


	char userdata[] = "hello world";
 80002d2:	4a1f      	ldr	r2, [pc, #124]	; (8000350 <main+0x84>)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	Button_init();
 80002dc:	f7ff ffde 	bl	800029c <Button_init>

	SPI2_GPIOInits();
 80002e0:	f7ff ff80 	bl	80001e4 <SPI2_GPIOInits>

	SPI2_Inits();
 80002e4:	f7ff ffa6 	bl	8000234 <SPI2_Inits>

	SPI_SSOEConfig(SPI2, ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	481a      	ldr	r0, [pc, #104]	; (8000354 <main+0x88>)
 80002ec:	f000 fb98 	bl	8000a20 <SPI_SSOEConfig>


	while(1){

		while ((GPIO_ReadFromInpPin(GPIOC, GPIO_PIN_13)));
 80002f0:	bf00      	nop
 80002f2:	210d      	movs	r1, #13
 80002f4:	4818      	ldr	r0, [pc, #96]	; (8000358 <main+0x8c>)
 80002f6:	f000 fa95 	bl	8000824 <GPIO_ReadFromInpPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f8      	bne.n	80002f2 <main+0x26>

		delay();
 8000300:	f7ff ffb6 	bl	8000270 <delay>

		//enable SPI peripheral
		SPI_Enable(SPI2);
 8000304:	4813      	ldr	r0, [pc, #76]	; (8000354 <main+0x88>)
 8000306:	f000 fb6b 	bl	80009e0 <SPI_Enable>

		uint8_t data_length = strlen(userdata);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff61 	bl	80001d4 <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	70fb      	strb	r3, [r7, #3]

		//send data length
		SPI_SendData(SPI2,&data_length, 1);
 8000318:	1cfb      	adds	r3, r7, #3
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	480d      	ldr	r0, [pc, #52]	; (8000354 <main+0x88>)
 8000320:	f000 fbb2 	bl	8000a88 <SPI_SendData>

		//send data
		SPI_SendData(SPI2, (uint8_t*)userdata, strlen(userdata));
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff54 	bl	80001d4 <strlen>
 800032c:	4602      	mov	r2, r0
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	4808      	ldr	r0, [pc, #32]	; (8000354 <main+0x88>)
 8000334:	f000 fba8 	bl	8000a88 <SPI_SendData>

		//confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 8000338:	bf00      	nop
 800033a:	2107      	movs	r1, #7
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <main+0x88>)
 800033e:	f000 fb8b 	bl	8000a58 <SPI_GetFlagStatus>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f8      	bne.n	800033a <main+0x6e>

		//disable SPI peripheral
		SPI_Disable(SPI2);
 8000348:	4802      	ldr	r0, [pc, #8]	; (8000354 <main+0x88>)
 800034a:	f000 fb59 	bl	8000a00 <SPI_Disable>
	while(1){
 800034e:	e7cf      	b.n	80002f0 <main+0x24>
 8000350:	08000b60 	.word	0x08000b60
 8000354:	40003800 	.word	0x40003800
 8000358:	40020800 	.word	0x40020800

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fbb9 	bl	8000b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff9d 	bl	80002cc <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000b74 	.word	0x08000b74
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000028 	.word	0x20000028

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <GPIO_Init>:
/**
 * @brief Initialize GPIO port
 *
 * @param pGPIOx base address of gpio peripheral
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

	uint8_t pin_number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	75fb      	strb	r3, [r7, #23]
	uint32_t temp=0;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]

	// enable peripheral clock
	GPIO_PClkControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f98b 	bl	80006e4 <GPIO_PClkControl>

	//1. configure mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d81d      	bhi.n	8000412 <GPIO_Init+0x62>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pin_number));
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	461a      	mov	r2, r3
 80003dc:	7dfb      	ldrb	r3, [r7, #23]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pin_number);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	2103      	movs	r1, #3
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6819      	ldr	r1, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	693a      	ldr	r2, [r7, #16]
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e0ac      	b.n	800056c <GPIO_Init+0x1bc>
	}else{
		// interrupt mode

		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pin_number); // clear to configure pin mode type as input
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	7dfb      	ldrb	r3, [r7, #23]
 800041a:	2103      	movs	r1, #3
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	43db      	mvns	r3, r3
 8000422:	4619      	mov	r1, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	400a      	ands	r2, r1
 800042a:	601a      	str	r2, [r3, #0]

		//1. Configure rising/falling edge

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	2b04      	cmp	r3, #4
 8000432:	d115      	bne.n	8000460 <GPIO_Init+0xb0>
			EXTI->FTSR |= (1<<pin_number);
 8000434:	4b8f      	ldr	r3, [pc, #572]	; (8000674 <GPIO_Init+0x2c4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	7dfa      	ldrb	r2, [r7, #23]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a8c      	ldr	r2, [pc, #560]	; (8000674 <GPIO_Init+0x2c4>)
 8000444:	430b      	orrs	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<<pin_number); //clear corresponding RTSR bit
 8000448:	4b8a      	ldr	r3, [pc, #552]	; (8000674 <GPIO_Init+0x2c4>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	7dfa      	ldrb	r2, [r7, #23]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	43d2      	mvns	r2, r2
 8000456:	4611      	mov	r1, r2
 8000458:	4a86      	ldr	r2, [pc, #536]	; (8000674 <GPIO_Init+0x2c4>)
 800045a:	400b      	ands	r3, r1
 800045c:	6093      	str	r3, [r2, #8]
 800045e:	e031      	b.n	80004c4 <GPIO_Init+0x114>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b05      	cmp	r3, #5
 8000466:	d115      	bne.n	8000494 <GPIO_Init+0xe4>
			EXTI->RTSR |= (1<<pin_number);
 8000468:	4b82      	ldr	r3, [pc, #520]	; (8000674 <GPIO_Init+0x2c4>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	7dfa      	ldrb	r2, [r7, #23]
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a7f      	ldr	r2, [pc, #508]	; (8000674 <GPIO_Init+0x2c4>)
 8000478:	430b      	orrs	r3, r1
 800047a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1<<pin_number); //clear corresponding FTSR bit
 800047c:	4b7d      	ldr	r3, [pc, #500]	; (8000674 <GPIO_Init+0x2c4>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	7dfa      	ldrb	r2, [r7, #23]
 8000482:	2101      	movs	r1, #1
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	43d2      	mvns	r2, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a79      	ldr	r2, [pc, #484]	; (8000674 <GPIO_Init+0x2c4>)
 800048e:	400b      	ands	r3, r1
 8000490:	60d3      	str	r3, [r2, #12]
 8000492:	e017      	b.n	80004c4 <GPIO_Init+0x114>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b06      	cmp	r3, #6
 800049a:	d113      	bne.n	80004c4 <GPIO_Init+0x114>
			EXTI->RTSR |= (1<<pin_number);
 800049c:	4b75      	ldr	r3, [pc, #468]	; (8000674 <GPIO_Init+0x2c4>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	7dfa      	ldrb	r2, [r7, #23]
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a72      	ldr	r2, [pc, #456]	; (8000674 <GPIO_Init+0x2c4>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<<pin_number);
 80004b0:	4b70      	ldr	r3, [pc, #448]	; (8000674 <GPIO_Init+0x2c4>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	7dfa      	ldrb	r2, [r7, #23]
 80004b6:	2101      	movs	r1, #1
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	4611      	mov	r1, r2
 80004be:	4a6d      	ldr	r2, [pc, #436]	; (8000674 <GPIO_Init+0x2c4>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure gpio port selection in SYSCFG_EXTICR
		uint8_t temp1 = pin_number/4;
 80004c4:	7dfb      	ldrb	r3, [r7, #23]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pin_number%4;
 80004ca:	7dfb      	ldrb	r3, [r7, #23]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	73bb      	strb	r3, [r7, #14]

		uint16_t port_code = GPIO_ADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a68      	ldr	r2, [pc, #416]	; (8000678 <GPIO_Init+0x2c8>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d024      	beq.n	8000526 <GPIO_Init+0x176>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a66      	ldr	r2, [pc, #408]	; (800067c <GPIO_Init+0x2cc>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d01d      	beq.n	8000522 <GPIO_Init+0x172>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a65      	ldr	r2, [pc, #404]	; (8000680 <GPIO_Init+0x2d0>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <GPIO_Init+0x16e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a63      	ldr	r2, [pc, #396]	; (8000684 <GPIO_Init+0x2d4>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d00f      	beq.n	800051a <GPIO_Init+0x16a>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a62      	ldr	r2, [pc, #392]	; (8000688 <GPIO_Init+0x2d8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d008      	beq.n	8000516 <GPIO_Init+0x166>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a60      	ldr	r2, [pc, #384]	; (800068c <GPIO_Init+0x2dc>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d101      	bne.n	8000512 <GPIO_Init+0x162>
 800050e:	2307      	movs	r3, #7
 8000510:	e00a      	b.n	8000528 <GPIO_Init+0x178>
 8000512:	2300      	movs	r3, #0
 8000514:	e008      	b.n	8000528 <GPIO_Init+0x178>
 8000516:	2304      	movs	r3, #4
 8000518:	e006      	b.n	8000528 <GPIO_Init+0x178>
 800051a:	2303      	movs	r3, #3
 800051c:	e004      	b.n	8000528 <GPIO_Init+0x178>
 800051e:	2302      	movs	r3, #2
 8000520:	e002      	b.n	8000528 <GPIO_Init+0x178>
 8000522:	2301      	movs	r3, #1
 8000524:	e000      	b.n	8000528 <GPIO_Init+0x178>
 8000526:	2300      	movs	r3, #0
 8000528:	81bb      	strh	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 800052a:	4b59      	ldr	r3, [pc, #356]	; (8000690 <GPIO_Init+0x2e0>)
 800052c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052e:	4a58      	ldr	r2, [pc, #352]	; (8000690 <GPIO_Init+0x2e0>)
 8000530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000534:	6453      	str	r3, [r2, #68]	; 0x44

		//SYSCFG->EXTICR[temp1] &= ~(0xF << 4*temp2);
		SYSCFG->EXTICR[temp1] |= (port_code << 4*temp2);
 8000536:	4a57      	ldr	r2, [pc, #348]	; (8000694 <GPIO_Init+0x2e4>)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3302      	adds	r3, #2
 800053c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000540:	89b9      	ldrh	r1, [r7, #12]
 8000542:	7bbb      	ldrb	r3, [r7, #14]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	4618      	mov	r0, r3
 800054c:	4951      	ldr	r1, [pc, #324]	; (8000694 <GPIO_Init+0x2e4>)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	4302      	orrs	r2, r0
 8000552:	3302      	adds	r3, #2
 8000554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the exti innterupt delivery using IMR
		EXTI->IMR |= (1<<pin_number);
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <GPIO_Init+0x2c4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	7dfa      	ldrb	r2, [r7, #23]
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a43      	ldr	r2, [pc, #268]	; (8000674 <GPIO_Init+0x2c4>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
	//2. configure speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pin_number);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	461a      	mov	r2, r3
 8000576:	7dfb      	ldrb	r3, [r7, #23]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<pin_number);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	7dfb      	ldrb	r3, [r7, #23]
 8000588:	2103      	movs	r1, #3
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	400a      	ands	r2, r1
 8000598:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6899      	ldr	r1, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
	//3. configure pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PUPDControl << (2 * pin_number);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	461a      	mov	r2, r3
 80005b4:	7dfb      	ldrb	r3, [r7, #23]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<pin_number);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68da      	ldr	r2, [r3, #12]
 80005c4:	7dfb      	ldrb	r3, [r7, #23]
 80005c6:	2103      	movs	r1, #3
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	400a      	ands	r2, r1
 80005d6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68d9      	ldr	r1, [r3, #12]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
	//4. configure output type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pin_number);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7a1b      	ldrb	r3, [r3, #8]
 80005f0:	461a      	mov	r2, r3
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1<<pin_number);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2101      	movs	r1, #1
 8000604:	fa01 f303 	lsl.w	r3, r1, r3
 8000608:	43db      	mvns	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	400a      	ands	r2, r1
 8000612:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6859      	ldr	r1, [r3, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	430a      	orrs	r2, r1
 8000622:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]

	//5. configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	795b      	ldrb	r3, [r3, #5]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d154      	bne.n	80006da <GPIO_Init+0x32a>

		if(pin_number < GPIO_PIN_8){
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d830      	bhi.n	8000698 <GPIO_Init+0x2e8>
			temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pin_number);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	461a      	mov	r2, r3
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	613b      	str	r3, [r7, #16]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF<<pin_number);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6a1a      	ldr	r2, [r3, #32]
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	210f      	movs	r1, #15
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	4619      	mov	r1, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	400a      	ands	r2, r1
 800065e:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6a19      	ldr	r1, [r3, #32]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	430a      	orrs	r2, r1
 800066e:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}

	}

}
 8000670:	e033      	b.n	80006da <GPIO_Init+0x32a>
 8000672:	bf00      	nop
 8000674:	40013c00 	.word	0x40013c00
 8000678:	40020000 	.word	0x40020000
 800067c:	40020400 	.word	0x40020400
 8000680:	40020800 	.word	0x40020800
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40021000 	.word	0x40021000
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40023800 	.word	0x40023800
 8000694:	40013800 	.word	0x40013800
			temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*(pin_number%8));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7a5b      	ldrb	r3, [r3, #9]
 800069c:	461a      	mov	r2, r3
 800069e:	7dfb      	ldrb	r3, [r7, #23]
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	613b      	str	r3, [r7, #16]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF<<pin_number%8);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	210f      	movs	r1, #15
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	430a      	orrs	r2, r1
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop

080006e4 <GPIO_PClkControl>:
 * @brief Enable/Disable peripheral clock
 *
 * @param pGPIOx    base address of gpio peripheral
 * @param enable    ENABLE/DISABLE macros
 */
void GPIO_PClkControl(GPIO_RegDef_t *pGPIOx, uint8_t enable) {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]

  if (enable == ENABLE) {
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d141      	bne.n	800077a <GPIO_PClkControl+0x96>

    if (pGPIOx == GPIOA) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a43      	ldr	r2, [pc, #268]	; (8000808 <GPIO_PClkControl+0x124>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d106      	bne.n	800070c <GPIO_PClkControl+0x28>
      GPIOA_PCLK_EN();
 80006fe:	4b43      	ldr	r3, [pc, #268]	; (800080c <GPIO_PClkControl+0x128>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a42      	ldr	r2, [pc, #264]	; (800080c <GPIO_PClkControl+0x128>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
      GPIOE_PCLK_DIS();
    } else if (pGPIOx == GPIOH) {
      GPIOH_PCLK_DIS();
    }
  }
}
 800070a:	e077      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOB) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a40      	ldr	r2, [pc, #256]	; (8000810 <GPIO_PClkControl+0x12c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d106      	bne.n	8000722 <GPIO_PClkControl+0x3e>
      GPIOB_PCLK_EN();
 8000714:	4b3d      	ldr	r3, [pc, #244]	; (800080c <GPIO_PClkControl+0x128>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a3c      	ldr	r2, [pc, #240]	; (800080c <GPIO_PClkControl+0x128>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000720:	e06c      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOC) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a3b      	ldr	r2, [pc, #236]	; (8000814 <GPIO_PClkControl+0x130>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d106      	bne.n	8000738 <GPIO_PClkControl+0x54>
      GPIOC_PCLK_EN();
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <GPIO_PClkControl+0x128>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a37      	ldr	r2, [pc, #220]	; (800080c <GPIO_PClkControl+0x128>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000736:	e061      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOD) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a37      	ldr	r2, [pc, #220]	; (8000818 <GPIO_PClkControl+0x134>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d106      	bne.n	800074e <GPIO_PClkControl+0x6a>
      GPIOD_PCLK_EN();
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <GPIO_PClkControl+0x128>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	4a31      	ldr	r2, [pc, #196]	; (800080c <GPIO_PClkControl+0x128>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074c:	e056      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOE) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a32      	ldr	r2, [pc, #200]	; (800081c <GPIO_PClkControl+0x138>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <GPIO_PClkControl+0x80>
      GPIOE_PCLK_EN();
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <GPIO_PClkControl+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <GPIO_PClkControl+0x128>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000762:	e04b      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOH) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a2e      	ldr	r2, [pc, #184]	; (8000820 <GPIO_PClkControl+0x13c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d147      	bne.n	80007fc <GPIO_PClkControl+0x118>
      GPIOH_PCLK_EN();
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <GPIO_PClkControl+0x128>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a26      	ldr	r2, [pc, #152]	; (800080c <GPIO_PClkControl+0x128>)
 8000772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000778:	e040      	b.n	80007fc <GPIO_PClkControl+0x118>
    if (pGPIOx == GPIOA) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <GPIO_PClkControl+0x124>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d106      	bne.n	8000790 <GPIO_PClkControl+0xac>
      GPIOA_PCLK_DIS();
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <GPIO_PClkControl+0x128>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a21      	ldr	r2, [pc, #132]	; (800080c <GPIO_PClkControl+0x128>)
 8000788:	f023 0301 	bic.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078e:	e035      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOB) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <GPIO_PClkControl+0x12c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d106      	bne.n	80007a6 <GPIO_PClkControl+0xc2>
      GPIOB_PCLK_DIS();
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <GPIO_PClkControl+0x128>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <GPIO_PClkControl+0x128>)
 800079e:	f023 0302 	bic.w	r3, r3, #2
 80007a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a4:	e02a      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOC) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <GPIO_PClkControl+0x130>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d106      	bne.n	80007bc <GPIO_PClkControl+0xd8>
      GPIOC_PCLK_DIS();
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <GPIO_PClkControl+0x128>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <GPIO_PClkControl+0x128>)
 80007b4:	f023 0304 	bic.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ba:	e01f      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOD) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <GPIO_PClkControl+0x134>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d106      	bne.n	80007d2 <GPIO_PClkControl+0xee>
      GPIOD_PCLK_DIS();
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <GPIO_PClkControl+0x128>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <GPIO_PClkControl+0x128>)
 80007ca:	f023 0308 	bic.w	r3, r3, #8
 80007ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d0:	e014      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOE) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <GPIO_PClkControl+0x138>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <GPIO_PClkControl+0x104>
      GPIOE_PCLK_DIS();
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <GPIO_PClkControl+0x128>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <GPIO_PClkControl+0x128>)
 80007e0:	f023 0310 	bic.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e6:	e009      	b.n	80007fc <GPIO_PClkControl+0x118>
    } else if (pGPIOx == GPIOH) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <GPIO_PClkControl+0x13c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d105      	bne.n	80007fc <GPIO_PClkControl+0x118>
      GPIOH_PCLK_DIS();
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <GPIO_PClkControl+0x128>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <GPIO_PClkControl+0x128>)
 80007f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40020000 	.word	0x40020000
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	40020800 	.word	0x40020800
 8000818:	40020c00 	.word	0x40020c00
 800081c:	40021000 	.word	0x40021000
 8000820:	40021c00 	.word	0x40021c00

08000824 <GPIO_ReadFromInpPin>:
 *
 * @param pGPIOx base address of gpio peripheral
 * @param Pin    pin number
 * @return uint8_t input pin value
 */
uint8_t GPIO_ReadFromInpPin(GPIO_RegDef_t *pGPIOx, uint8_t Pin){
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]

	uint8_t out = (uint8_t)(pGPIOx->IDR >> Pin) & (0x00000001);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	691a      	ldr	r2, [r3, #16]
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	fa22 f303 	lsr.w	r3, r2, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
	return out;
 8000842:	7bfb      	ldrb	r3, [r7, #15]

}
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SPI_Init>:
	pSPIx->I2SPR = 0x0002;
}


/*Initialitazion / Deinitialization */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
	temp = pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	60fb      	str	r3, [r7, #12]

	SPI_PClkControl(pSPIHandle->pSPIx, ENABLE);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f848 	bl	8000900 <SPI_PClkControl>

	if(pSPIHandle->SPIConfig.SPI_BusCongif == SPI_BUS_CONFIG_FD){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d104      	bne.n	8000882 <SPI_Init+0x32>
		//BIDI mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e014      	b.n	80008ac <SPI_Init+0x5c>
	}else if(pSPIHandle->SPIConfig.SPI_BusCongif == SPI_BUS_CONFIG_HD){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	795b      	ldrb	r3, [r3, #5]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d104      	bne.n	8000894 <SPI_Init+0x44>
		//BIDI mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e00b      	b.n	80008ac <SPI_Init+0x5c>
	}else if(pSPIHandle->SPIConfig.SPI_BusCongif == SPI_BUS_CONFIG_SIMPLEX_RX){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d107      	bne.n	80008ac <SPI_Init+0x5c>
		//BIDI mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008a2:	60fb      	str	r3, [r7, #12]
		//RXONLY should be set
		temp |= (1<<SPI_CR1_RXONLY);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008aa:	60fb      	str	r3, [r7, #12]
	}

	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	799b      	ldrb	r3, [r3, #6]
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPIConfig.SPI_CPHA <<SPI_CR1_CPHA);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7a5b      	ldrb	r3, [r3, #9]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPIConfig.SPI_CPOL<<SPI_CR1_CPOL);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a1b      	ldrb	r3, [r3, #8]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPIConfig.SPI_DFF<<SPI_CR1_DFF);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	79db      	ldrb	r3, [r3, #7]
 80008d8:	02db      	lsls	r3, r3, #11
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4313      	orrs	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPIConfig.SPI_SSM<<SPI_CR1_SSM);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7a9b      	ldrb	r3, [r3, #10]
 80008e6:	025b      	lsls	r3, r3, #9
 80008e8:	461a      	mov	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SPI_PClkControl>:
	}

}

/*Peripheral clock control*/
void SPI_PClkControl(SPI_RegDef_t *pSPIx, uint8_t enable){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	if(enable == ENABLE){
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d12b      	bne.n	800096a <SPI_PClkControl+0x6a>
		if(pSPIx == SPI1){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <SPI_PClkControl+0xcc>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <SPI_PClkControl+0x28>
			SPI1_PCLK_EN();
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <SPI_PClkControl+0xd0>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DIS();
		}else if(pSPIx == SPI4){
			SPI4_PCLK_DIS();
		}
	}
}
 8000926:	e04b      	b.n	80009c0 <SPI_PClkControl+0xc0>
		}else if(pSPIx == SPI2){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <SPI_PClkControl+0xd4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <SPI_PClkControl+0x3e>
			SPI2_PCLK_EN();
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800093c:	e040      	b.n	80009c0 <SPI_PClkControl+0xc0>
		}else if(pSPIx == SPI3){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <SPI_PClkControl+0xd8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <SPI_PClkControl+0x54>
			SPI3_PCLK_EN();
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <SPI_PClkControl+0xd0>)
 800094c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000952:	e035      	b.n	80009c0 <SPI_PClkControl+0xc0>
		}else if(pSPIx == SPI4){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a21      	ldr	r2, [pc, #132]	; (80009dc <SPI_PClkControl+0xdc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d131      	bne.n	80009c0 <SPI_PClkControl+0xc0>
			SPI4_PCLK_EN();
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <SPI_PClkControl+0xd0>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000962:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000966:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000968:	e02a      	b.n	80009c0 <SPI_PClkControl+0xc0>
		if(pSPIx == SPI1){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <SPI_PClkControl+0xcc>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <SPI_PClkControl+0x80>
			SPI1_PCLK_DIS();
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <SPI_PClkControl+0xd0>)
 8000978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800097e:	e01f      	b.n	80009c0 <SPI_PClkControl+0xc0>
		}else if(pSPIx == SPI2){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <SPI_PClkControl+0xd4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <SPI_PClkControl+0x96>
			SPI2_PCLK_DIS();
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <SPI_PClkControl+0xd0>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <SPI_PClkControl+0xd0>)
 800098e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000994:	e014      	b.n	80009c0 <SPI_PClkControl+0xc0>
		}else if(pSPIx == SPI3){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <SPI_PClkControl+0xd8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <SPI_PClkControl+0xac>
			SPI3_PCLK_DIS();
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <SPI_PClkControl+0xd0>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <SPI_PClkControl+0xd0>)
 80009a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009aa:	e009      	b.n	80009c0 <SPI_PClkControl+0xc0>
		}else if(pSPIx == SPI4){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <SPI_PClkControl+0xdc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d105      	bne.n	80009c0 <SPI_PClkControl+0xc0>
			SPI4_PCLK_DIS();
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SPI_PClkControl+0xd0>)
 80009b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SPI_PClkControl+0xd0>)
 80009ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009be:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40013000 	.word	0x40013000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40003800 	.word	0x40003800
 80009d8:	40003c00 	.word	0x40003c00
 80009dc:	40013400 	.word	0x40013400

080009e0 <SPI_Enable>:

void SPI_Enable(SPI_RegDef_t *pSPIx){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SPI_Disable>:

void SPI_Disable(SPI_RegDef_t *pSPIx){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SPI_SSOEConfig>:
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t enable){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
	if(enable){
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f043 0204 	orr.w	r2, r3, #4
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000a3e:	e005      	b.n	8000a4c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f023 0204 	bic.w	r2, r3, #4
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	605a      	str	r2, [r3, #4]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint8_t flag){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
	{
	    if(pSPIx->SR & (1 << flag))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SPI_GetFlagStatus+0x22>
	    {
	        return FLAG_SET;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <SPI_GetFlagStatus+0x24>
	    }
	    return FLAG_RESET;
 8000a7a:	2300      	movs	r3, #0
	}
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SPI_SendData>:

/*
 * Data send and receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuff, uint32_t TxLen){
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]

	uint8_t dff = (pSPIx->CR1 & (1 << SPI_CR1_DFF)) ;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75fb      	strb	r3, [r7, #23]

	while (TxLen>0){
 8000a9c:	e026      	b.n	8000aec <SPI_SendData+0x64>
		while(!(pSPIx->SR & (1 << 1))); // wait till TXE is set
 8000a9e:	bf00      	nop
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <SPI_SendData+0x18>

		// check the DFF bit in SPI_CR1
		if(pSPIx->CR1 &(1<<SPI_CR1_DFF)){
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00e      	beq.n	8000ad6 <SPI_SendData+0x4e>
			pSPIx->DR = *((uint16_t*)pTxBuff);
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60da      	str	r2, [r3, #12]
			TxLen--;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
			TxLen--;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuff++;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	e00a      	b.n	8000aec <SPI_SendData+0x64>
		}else{
			pSPIx->DR = *pTxBuff;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	60da      	str	r2, [r3, #12]
			TxLen--;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
			pTxBuff++;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
	while (TxLen>0){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1d5      	bne.n	8000a9e <SPI_SendData+0x16>
		}

	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <__libc_init_array>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	4d0d      	ldr	r5, [pc, #52]	; (8000b38 <__libc_init_array+0x38>)
 8000b04:	4c0d      	ldr	r4, [pc, #52]	; (8000b3c <__libc_init_array+0x3c>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	2600      	movs	r6, #0
 8000b0c:	42a6      	cmp	r6, r4
 8000b0e:	d109      	bne.n	8000b24 <__libc_init_array+0x24>
 8000b10:	4d0b      	ldr	r5, [pc, #44]	; (8000b40 <__libc_init_array+0x40>)
 8000b12:	4c0c      	ldr	r4, [pc, #48]	; (8000b44 <__libc_init_array+0x44>)
 8000b14:	f000 f818 	bl	8000b48 <_init>
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	10a4      	asrs	r4, r4, #2
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	42a6      	cmp	r6, r4
 8000b20:	d105      	bne.n	8000b2e <__libc_init_array+0x2e>
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
 8000b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b28:	4798      	blx	r3
 8000b2a:	3601      	adds	r6, #1
 8000b2c:	e7ee      	b.n	8000b0c <__libc_init_array+0xc>
 8000b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b32:	4798      	blx	r3
 8000b34:	3601      	adds	r6, #1
 8000b36:	e7f2      	b.n	8000b1e <__libc_init_array+0x1e>
 8000b38:	08000b6c 	.word	0x08000b6c
 8000b3c:	08000b6c 	.word	0x08000b6c
 8000b40:	08000b6c 	.word	0x08000b6c
 8000b44:	08000b70 	.word	0x08000b70

08000b48 <_init>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	bf00      	nop
 8000b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4e:	bc08      	pop	{r3}
 8000b50:	469e      	mov	lr, r3
 8000b52:	4770      	bx	lr

08000b54 <_fini>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	bf00      	nop
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr
